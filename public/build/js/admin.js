angular.module("myAdmin",["ui.router","ngFileUpload","adminRoutes","gamesAdmin","gourmetsAdmin","hearthStoneAdmin","saibanAdmin","myServices","myConfig"]).run(function($rootScope,$state,$http){$http.defaults.headers.common.auth="ljpon3UUVTMMmIhE6Kcf",$http.defaults.headers.post.auth="HNoHW7HUKEYxW5DFxaVj",$rootScope.imagePath="http://zhuhaolin.com/images/",$rootScope.$on("$stateChangeSuccess",function(){$rootScope.title=$state.current.title})}).controller("imageUploadController",["$scope","Upload",function($scope,Upload){$scope.$watch("file",function(file){file&&$scope.upload($scope.file)}),$scope.upload=function(file){Upload.upload({url:"/api/images",file:file}).progress(function(evt){$scope.uploading=!0,$scope.progress=parseInt(100*evt.loaded/evt.total)}).success(function(data,status,headers,config){$scope.progress=0,$scope.success=!0,$scope.imageName=data}).error(function(data,status,headers,config){$scope.fail=!0,$scope.msg=data})}}]);
angular.module("gamesAdmin",[]).controller("gamesController",function($scope,Game,Count,GAME_PLATFORMS,GAME_GENRES){Count.get({model:"games"},function(count){$scope.count=count.count,$scope.games=Game.query({limit:count.count})}),$scope.platforms=GAME_PLATFORMS,$scope.genres=GAME_GENRES}).controller("gameCreateController",function($scope,$state,Game,GAME_PLATFORMS,GAME_GENRES){$scope.fields=["title","name","developer","publisher","release_at","buy_at","rate","image"],$scope.platforms=GAME_PLATFORMS,$scope.genres=GAME_GENRES,$scope.game=new Game,$scope.saveGame=function(){$scope.game.$save(function(data){data.success?$state.go("games"):($scope.show=!0,$scope.result=data.msg)})}}).controller("gameUpdateController",function($scope,$filter,$state,Game,GAME_PLATFORMS,GAME_GENRES){$scope.fields=["title","name","developer","publisher","release_at","buy_at","rate","image"],$scope.platforms=GAME_PLATFORMS,$scope.genres=GAME_GENRES,$scope.saveGame=function(){$scope.game.$update(function(data){data.success?$state.go("games"):($scope.show=!0,$scope.result=data.msg)})},$scope.loadGame=function(){$scope.game=Game.get({url:$state.params.url}),$scope.$watch("game.release_at",function(newValue){newValue&&($scope.game.release_at=$filter("date")(newValue,"yyyy-MM-dd"))}),$scope.$watch("game.buy_at",function(newValue){newValue&&($scope.game.buy_at=$filter("date")(newValue,"yyyy-MM-dd"))})},$scope.loadGame()}).controller("gameTrophiesController",function($scope,$state,$filter,GameTrophy,GAME_TROPHY_RARITY){$scope.rarities=GAME_TROPHY_RARITY,GameTrophy.get({id:$state.params.id},function(data){var format=[];angular.forEach(data.trophies,function(value){value.date&&(value.date=$filter("date")(value.date,"yyyy-MM-dd")),format.push(value),format.length==data.trophies.length&&(data.trophies=format,$scope.trophies=data)})}),$scope.saveTrophies=function(){$scope.trophies.$update(function(data){data.success?$state.go("games"):($scope.show=!0,$scope.result=data.msg)})},$scope.removeTrophy=function(index){$scope.trophies.trophies.splice(index,1)},$scope.addTrophy=function(){var trophy=new GameTrophy;$scope.trophies.trophies.push(trophy)}}).controller("gameTrophiesScrapController",function($scope,$state,$http){$scope.scrapGame=function(){$http.post("/api/games/scrap/"+$state.params.id,{url:$scope.url}).success(function(data){$state.go("gameTrophies",{id:data})}).error(function(error){$scope.show=!0,$scope.result=error})}});
angular.module("gourmetsAdmin",[]).controller("gourmetsController",function($scope,Gourmet,Count){Count.get({model:"gourmets"},function(count){$scope.count=count.count,$scope.gourmets=Gourmet.query({limit:count.count})})}).controller("gourmetCreateController",function($scope,$state,Gourmet){$scope.fields=["food","restaurant","date","image","url"],$scope.gourmet=new Gourmet,$scope.saveGourmet=function(){$scope.gourmet.$save(function(data){data.success?$state.go("gourmets"):($scope.show=!0,$scope.result=data.msg)})}}).controller("gourmetUpdateController",function($scope,$filter,$state,Gourmet){$scope.fields=["food","restaurant","date","image","url"],$scope.saveGourmet=function(){$scope.gourmet.$update(function(data){data.success?$state.go("gourmets"):($scope.show=!0,$scope.result=data.msg)})},$scope.loadGourmet=function(){$scope.gourmet=Gourmet.get({id:$state.params.id}),$scope.$watch("gourmet.date",function(newValue){newValue&&($scope.gourmet.date=$filter("date")(newValue,"yyyy-MM-dd"))})},$scope.loadGourmet()});
angular.module("hearthStoneAdmin",[]).controller("hsDecksController",function($scope,HSDeck,HS_PLAYER_CLASSES){$scope.playerClasses=HS_PLAYER_CLASSES,$scope.decks=HSDeck.query()}).controller("hsDeckCreateController",function($scope,$state,HSDeck,HS_PLAYER_CLASSES){$scope.playerClasses=HS_PLAYER_CLASSES,$scope.deck=new HSDeck,$scope.saveDeck=function(){$scope.deck.$save(function(data){data.success?$state.go("HSdecks"):($scope.show=!0,$scope.result=data.msg)})}}).controller("hsDeckUpdateController",function($scope,$state,HSDeck,HS_PLAYER_CLASSES){$scope.playerClasses=HS_PLAYER_CLASSES,$scope.saveDeck=function(){$scope.deck.$update(function(data){data.success?$state.go("HSdecks"):($scope.show=!0,$scope.result=data.msg)})},$scope.loadDeck=function(){$scope.deck=HSDeck.get({id:$state.params.id})},$scope.loadDeck()}).controller("hsCardAddController",function($scope,$state,$filter,HSCard,HSDeck,Count,HS_PLAYER_CLASSES){$scope.playerClasses=HS_PLAYER_CLASSES,$scope.neutralPage=0,$scope.classPage=0,HSCard.query(function(data){$scope.neutralCards=data}),$scope.deck=HSDeck.get({id:$state.params.deck_id},function(data){$scope.deckCards=[],data.cards&&angular.forEach(data.cards,function(item){$scope.deckCards.push(item.card),2===item.count&&$scope.deckCards.push(item.card)}),HSCard.query({playerClass:data.playerClass},function(cards){$scope.classCards=cards})}),$scope.getMoreCards=function(type,more){var page=$scope.neutralPage;-1!=type&&(page=$scope.classPage),Count.get({model:"cards",playerClass:type},function(count){if("prev"==more&&0!==page)page-=1;else{if(!("next"==more&&page<Math.ceil(count.count/12)-1))return!1;page+=1}HSCard.query({playerClass:type,offset:page},function(data){-1!=type?($scope.classCards=data,$scope.classPage=page):($scope.neutralCards=data,$scope.neutralPage=page)})})},$scope.addCard=function(card){$scope.deckCards.length>1?$filter("checkCard")(card,$scope.deckCards)&&$scope.deckCards.push(card):$scope.deckCards.push(card)},$scope.removeCard=function(card){$scope.deckCards.splice($scope.deckCards.indexOf(card),1)},$scope.addCards=function(deck,cards){deck.cards=cards,deck.$update(function(data){data.success?$state.go("HSdecks"):($scope.show=!0,$scope.result=data.msg)})}}).controller("hsSeasonsController",function($scope,HSSeason,HSDeck){$scope.seasons=HSSeason.query(),$scope.decks=[],HSDeck.query(function(data){angular.forEach(data,function(deck){$scope.decks[deck._id]=deck})})}).controller("hsSeasonCreateController",function($scope,$state,HSSeason,HSDeck){$scope.fields=["title","month","rank","image"],$scope.season=new HSSeason,$scope.decks=HSDeck.query(),$scope.season.decks=[],$scope.selectDeck=function(id){$scope.season.decks.indexOf(id)<0?$scope.season.decks.push(id):$scope.season.decks.splice($scope.season.decks.indexOf(id),1)},$scope.saveSeason=function(){$scope.season.$save(function(data){data.success?$state.go("HSseasons"):($scope.show=!0,$scope.result=data.msg)})}}).controller("hsSeasonUpdateController",function($scope,$state,$filter,HSSeason,HSDeck){$scope.fields=["title","month","rank","image"],$scope.decks=HSDeck.query(),$scope.selectDeck=function(id){$scope.season.decks.indexOf(id)<0?$scope.season.decks.push(id):$scope.season.decks.splice($scope.season.decks.indexOf(id),1)},$scope.saveSeason=function(){$scope.season.$update(function(data){data.success?$state.go("HSseasons"):($scope.show=!0,$scope.result=data.msg)})},$scope.loadSeason=function(){$scope.season=HSSeason.get({url:$state.params.url}),$scope.$watch("season.month",function(newValue){newValue&&($scope.season.month=$filter("date")(newValue,"yyyy-MM"))})},$scope.loadSeason()}).controller("hsMatchesController",function($scope,$stateParams,HSMatch,HS_PLAYER_CLASSES){var limit=100,page=parseInt($stateParams.page)?parseInt($stateParams.page):1;HSMatch.get({page:page},function(data){if(data.success){$scope.matches=data.data.list;var total=data.data.total;$scope.totalPage=new Array(Math.ceil(total/limit)),$scope.currentPage=data.data.currentPage}}),$scope.playerClasses=HS_PLAYER_CLASSES}).controller("hsMatchCreateController",function($scope,HSDeck,HSMatch,HS_PLAYER_CLASSES){$scope.match=new HSMatch,$scope.matches=[],$scope.decks=HSDeck.query(),$scope.playerClasses=HS_PLAYER_CLASSES,$scope.saveMatch=function(result){$scope.match.result=result,$scope.match.$save(function(data){data.success?$scope.matches.push(data.data):($scope.show=!0,$scope.result=data.data.errorMsg)})}}).filter("checkCard",function(){return function(item,object){for(var count=0,i=0;i<object.length;i++)if(item._id==object[i]._id&&count++,2==count)return!1;return!0}}).directive("ngCards",function(){return{restrict:"A",replace:!0,link:function(scope,element,attrs){$("a").click(function(e){e.preventDefault()})}}});
angular.module("saibanAdmin",[]).controller("saibanGamesController",function($scope,saibanGame,SAIBAN_PLATFORM,SAIBAN_SERIES){$scope.platforms=SAIBAN_PLATFORM,$scope.serieses=SAIBAN_SERIES,saibanGame.query(function(data){$scope.games=data})}).controller("saibanGameCreateController",function($scope,$state,$filter,saibanGame,SAIBAN_PLATFORM,SAIBAN_SERIES){$scope.platforms=SAIBAN_PLATFORM,$scope.serieses=SAIBAN_SERIES,$scope.fields=["order","image","release_at"],$scope.game=new saibanGame,$scope.game.chapters=[],$scope.addChapter=function(){var newChapter={title:"",description:""};$scope.game.chapters.push(newChapter)},$scope.saveGame=function(){$scope.game.$save(function(data){data.success?$state.go("saibanGames"):($scope.show=!0,$scope.result=data.msg)})}}).controller("saibanGameUpdateController",function($scope,$state,$filter,saibanGame,SAIBAN_PLATFORM,SAIBAN_SERIES){$scope.platforms=SAIBAN_PLATFORM,$scope.serieses=SAIBAN_SERIES,$scope.fields=["order","image","release_at"],$scope.addChapter=function(){var newChapter={title:"",description:""};$scope.game.chapters.push(newChapter)},$scope.saveGame=function(){$scope.game.$update(function(data){data.success?$state.go("saibanGames"):($scope.show=!0,$scope.result=data.msg)})},$scope.loadGame=function(){$scope.game=saibanGame.get({url:$state.params.url}),$scope.$watch("game.release_at",function(date){date&&($scope.game.release_at=$filter("date")(date,"yyyy-MM-dd"))})},$scope.loadGame()});
angular.module("adminRoutes",[]).config(function($stateProvider,$urlRouterProvider,$locationProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("index",{url:"/admin",templateUrl:"/views/admin/index.html",title:"Home"}).state("games",{url:"/admin/games",templateUrl:"/views/admin/games/list.html",controller:"gamesController",title:"Games"}).state("gameCreate",{url:"/admin/games/add",templateUrl:"/views/admin/games/create.html",controller:"gameCreateController",title:"Game Create"}).state("gameUpdate",{url:"/admin/games/:url",templateUrl:"/views/admin/games/create.html",controller:"gameUpdateController",title:"Game Update"}).state("gameTrophiesScrap",{url:"/admin/scrap/:id",templateUrl:"/views/admin/games/scrap.html",controller:"gameTrophiesScrapController",title:"Game Trophies Scrap"}).state("gameTrophies",{url:"/admin/trophies/:id",templateUrl:"/views/admin/games/trophies.html",controller:"gameTrophiesController",title:"Game Trophies"}).state("gourmets",{url:"/admin/gourmets",templateUrl:"/views/admin/gourmets/list.html",controller:"gourmetsController",title:"Gourmets"}).state("gourmetCreate",{url:"/admin/gourmets/add",templateUrl:"/views/admin/gourmets/create.html",controller:"gourmetCreateController",title:"Gourmet Create"}).state("gourmetUpdate",{url:"/admin/gourmets/:id",templateUrl:"/views/admin/gourmets/create.html",controller:"gourmetUpdateController",title:"Gourmet Update"}).state("HSdecks",{url:"/admin/hearth-stone-decks",templateUrl:"/views/admin/hearthStone/deck_list.html",controller:"hsDecksController",title:"Hearth Stone Decks"}).state("HSdeckCreate",{url:"/admin/hearth-stone-decks/add",templateUrl:"/views/admin/hearthStone/deck_create.html",controller:"hsDeckCreateController",title:"Hearth Stone Deck Create"}).state("HSdeckUpdate",{url:"/admin/hearth-stone-decks/:id",templateUrl:"/views/admin/hearthStone/deck_create.html",controller:"hsDeckUpdateController",title:"Hearth Stone Deck Update"}).state("HScardAdd",{url:"/admin/hearth-stone-cards/:deck_id",templateUrl:"/views/admin/hearthStone/cards.html",controller:"hsCardAddController",title:"Hearth Stone Card Add"}).state("HSseasons",{url:"/admin/hearth-stone-seasons",templateUrl:"/views/admin/hearthStone/season_list.html",controller:"hsSeasonsController",title:"Hearth Stone Seasons"}).state("HSSeasonCreate",{url:"/admin/hearth-stone-seasons/add",templateUrl:"/views/admin/hearthStone/season_create.html",controller:"hsSeasonCreateController",title:"Hearth Stone Season Create"}).state("HSSeasonUpdate",{url:"/admin/hearth-stone-seasons/:url",templateUrl:"/views/admin/hearthStone/season_create.html",controller:"hsSeasonUpdateController",title:"Hearth Stone Season Update"}).state("HSMatches",{url:"/admin/hearth-stone-matches?page",templateUrl:"/views/admin/hearthStone/matches_list.html",controller:"hsMatchesController",title:"Hearth Stone Matches"}).state("HSMatchCreate",{url:"/admin/hearth-stone-matches/add",templateUrl:"/views/admin/hearthStone/match_create.html",controller:"hsMatchCreateController",title:"Hearth Stone Match Create"}).state("saibanGames",{url:"/admin/saiban-games",templateUrl:"/views/admin/saiban/game_list.html",controller:"saibanGamesController",title:"Gyakuten Saiban Games"}).state("saibanGameCreate",{url:"/admin/saiban-games/add",templateUrl:"/views/admin/saiban/game_create.html",controller:"saibanGameCreateController",title:"Gyakuten Saiban Game Create"}).state("saibanGameUpdate",{url:"/admin/saiban-games/:url",templateUrl:"/views/admin/saiban/game_create.html",controller:"saibanGameUpdateController",title:"Gyakuten Saiban Game Update"}),$locationProvider.html5Mode({enabled:!0,requireBase:!1})});
angular.module("myServices",["ngResource"]).factory("Count",function($resource){return $resource("/api/count/:model")}).factory("Game",function($resource){return $resource("/api/games/:url",{url:"@url"},{update:{method:"POST"}})}).factory("GameTrophy",function($resource){return $resource("/api/games/trophy/:id",{id:"@_id"},{update:{method:"POST"}})}).factory("Gourmet",function($resource){return $resource("/api/gourmets/:id",{id:"@_id"},{update:{method:"POST"}})}).factory("HSCard",function($resource){return $resource("/api/hearth-stone/cards")}).factory("HSDeck",function($resource){return $resource("/api/hearth-stone/decks/:id",{id:"@_id"},{update:{method:"POST"}})}).factory("HSSeason",function($resource){return $resource("/api/hearth-stone/seasons/:url",{url:"@url"},{update:{method:"POST"}})}).factory("HSWin",function($resource){return $resource("/api/hearth-stone/wins/:id",{id:"@_id"},{update:{method:"POST"}})}).factory("HSSeasonWin",function($resource){return $resource("/api/hearth-stone/season_wins/:id")}).factory("HSDeckWin",function($resource){return $resource("/api/hearth-stone/deck_wins/:id")}).factory("HSMatch",function($resource){return $resource("/api/hearth-stone/matches",{id:"@_id"},{update:{method:"POST"}})}).factory("saibanGame",function($resource){return $resource("/api/saiban/games/:url",{url:"@url"},{update:{method:"POST"}})});
angular.module("myConfig",[]).constant("GAME_PLATFORMS",[{value:0,name:"PlayStation 3"},{value:1,name:"PlayStation Vita"},{value:2,name:"PlayStation 4"}]).constant("GAME_GENRES",[{value:0,name:"Action"},{value:1,name:"Adventure"},{value:2,name:"Fighting"},{value:3,name:"Racing"},{value:4,name:"Role-Playing"},{value:5,name:"Sports"},{value:6,name:"Third-person shooter"},{value:7,name:"Strategy"}]).constant("GAME_TROPHY_RARITY",[{value:0,name:"Bronze"},{value:1,name:"Gold"},{value:2,name:"Silver"},{value:3,name:"Platinum"}]).constant("HS_PLAYER_CLASSES",[{value:0,name:"Druid"},{value:1,name:"Hunter"},{value:2,name:"Mage"},{value:3,name:"Paladin"},{value:4,name:"Priest"},{value:5,name:"Rogue"},{value:6,name:"Shaman"},{value:7,name:"Warlock"},{value:8,name:"Warrior"}]).constant("SAIBAN_PLATFORM",[{value:0,name:"GBA"},{value:1,name:"NDS"},{value:2,name:"3DS"}]).constant("SAIBAN_SERIES",[{value:0,name:"逆转裁判"},{value:1,name:"逆转检事"},{value:2,name:"其他"}]);